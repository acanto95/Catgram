/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { Directive, forwardRef, Input } from '@angular/core';
import { NgbDate } from './ngb-date';
import { NgbCalendar } from './ngb-calendar';
/**
 * @param {?} value
 * @return {?}
 */
function isNgbDateStruct(value) {
    return value && value.day && value.month && value.year;
}
/**
 * A class containing factories for datepicker validator functions:
 * * `NgbDateValidators.minDate(minDate: NgbDateStruct)` - checks that the date is after the min date
 * * `NgbDateValidators.maxDate(maxDate: NgbDateStruct)` - checks that the date is before the max date
 * * `NgbDateValidators.invalidDate(calendar: NgbCalendar)` - checks that the date is valid
 *
 * \@since 4.2.0
 */
// @dynamic
var /**
 * A class containing factories for datepicker validator functions:
 * * `NgbDateValidators.minDate(minDate: NgbDateStruct)` - checks that the date is after the min date
 * * `NgbDateValidators.maxDate(maxDate: NgbDateStruct)` - checks that the date is before the max date
 * * `NgbDateValidators.invalidDate(calendar: NgbCalendar)` - checks that the date is valid
 *
 * \@since 4.2.0
 */
// @dynamic
NgbDateValidators = /** @class */ (function () {
    function NgbDateValidators() {
    }
    /**
     * @param {?} minDate
     * @return {?}
     */
    NgbDateValidators.minDate = /**
     * @param {?} minDate
     * @return {?}
     */
    function (minDate) {
        return function (control) {
            if (!isNgbDateStruct(control.value) || !isNgbDateStruct(minDate)) {
                return null;
            }
            /** @type {?} */
            var ngbDate = NgbDate.from(control.value);
            return ngbDate.before(NgbDate.from(minDate)) ? { 'ngbDate': { requiredBefore: minDate } } : null;
        };
    };
    /**
     * @param {?} maxDate
     * @return {?}
     */
    NgbDateValidators.maxDate = /**
     * @param {?} maxDate
     * @return {?}
     */
    function (maxDate) {
        return function (control) {
            if (!isNgbDateStruct(control.value) || !isNgbDateStruct(maxDate)) {
                return null;
            }
            /** @type {?} */
            var ngbDate = NgbDate.from(control.value);
            return ngbDate.after(NgbDate.from(maxDate)) ? { 'ngbDate': { requiredAfter: maxDate } } : null;
        };
    };
    /**
     * @param {?} calendar
     * @return {?}
     */
    NgbDateValidators.invalidDate = /**
     * @param {?} calendar
     * @return {?}
     */
    function (calendar) {
        return function (control) { return calendar.isValid(control.value) ? null : { 'ngbDate': { invalid: control.value } }; };
    };
    return NgbDateValidators;
}());
/**
 * A class containing factories for datepicker validator functions:
 * * `NgbDateValidators.minDate(minDate: NgbDateStruct)` - checks that the date is after the min date
 * * `NgbDateValidators.maxDate(maxDate: NgbDateStruct)` - checks that the date is before the max date
 * * `NgbDateValidators.invalidDate(calendar: NgbCalendar)` - checks that the date is valid
 *
 * \@since 4.2.0
 */
// @dynamic
export { NgbDateValidators };
/**
 * A provider which adds `NgbInvalidDateValidator` to the `NG_VALIDATORS` multi-provider list.
 * @type {?}
 */
var NGB_INVALID_DATE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return NgbInvalidDateValidator; }),
    multi: true
};
/**
 * A directive that adds date validation to all NgbInputDatepicker controls. The directive is provided with the
 * `NG_VALIDATORS` multi-provider list.
 *
 * \@since 4.2.0
 */
var NgbInvalidDateValidator = /** @class */ (function () {
    function NgbInvalidDateValidator(_calendar) {
        this._calendar = _calendar;
        this._validator = NgbDateValidators.invalidDate(this._calendar);
    }
    /**
     * @param {?} control
     * @return {?}
     */
    NgbInvalidDateValidator.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return control.value == null ? null : this._validator(control);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgbInvalidDateValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChange = fn; };
    NgbInvalidDateValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'input[ngbDatepicker][formControlName],input[ngbDatepicker][formControl],input[ngbDatepicker][ngModel]',
                    providers: [NGB_INVALID_DATE_VALIDATOR]
                },] }
    ];
    /** @nocollapse */
    NgbInvalidDateValidator.ctorParameters = function () { return [
        { type: NgbCalendar }
    ]; };
    return NgbInvalidDateValidator;
}());
export { NgbInvalidDateValidator };
if (false) {
    /** @type {?} */
    NgbInvalidDateValidator.prototype._validator;
    /** @type {?} */
    NgbInvalidDateValidator.prototype._onChange;
    /** @type {?} */
    NgbInvalidDateValidator.prototype._calendar;
}
/**
 * A provider which adds `NgbMinDateValidator` to the `NG_VALIDATORS` multi-provider list.
 * @type {?}
 */
var NGB_MIN_DATE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return NgbMinDateValidator; }),
    multi: true
};
/**
 * A directive that adds min date validation to all NgbInputDatepicker controls with the `minDate` attribute. The
 * directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * \@since 4.2.0
 */
var NgbMinDateValidator = /** @class */ (function () {
    function NgbMinDateValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgbMinDateValidator.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('minDate' in changes) {
            this._createValidator();
            if (this._onChange) {
                this._onChange();
            }
        }
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgbMinDateValidator.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this.minDate == null ? null : this._validator(control);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgbMinDateValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChange = fn; };
    /**
     * @return {?}
     */
    NgbMinDateValidator.prototype._createValidator = /**
     * @return {?}
     */
    function () { this._validator = NgbDateValidators.minDate(this.minDate); };
    NgbMinDateValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'input[ngbDatepicker][minDate][formControlName],input[ngbDatepicker][minDate][formControl],input[ngbDatepicker][minDate][ngModel]',
                    providers: [NGB_MIN_DATE_VALIDATOR]
                },] }
    ];
    NgbMinDateValidator.propDecorators = {
        minDate: [{ type: Input }]
    };
    return NgbMinDateValidator;
}());
export { NgbMinDateValidator };
if (false) {
    /** @type {?} */
    NgbMinDateValidator.prototype._validator;
    /** @type {?} */
    NgbMinDateValidator.prototype._onChange;
    /** @type {?} */
    NgbMinDateValidator.prototype.minDate;
}
/**
 * A provider which adds `NgbMaxDateValidator` to the `NG_VALIDATORS` multi-provider list.
 * @type {?}
 */
var NGB_MAX_DATE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return NgbMaxDateValidator; }),
    multi: true
};
/**
 * A directive that adds max date validation to all NgbInputDatepicker controls with the `maxDate` attribute. The
 * directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * \@since 4.2.0
 */
var NgbMaxDateValidator = /** @class */ (function () {
    function NgbMaxDateValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgbMaxDateValidator.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('maxDate' in changes) {
            this._createValidator();
            if (this._onChange) {
                this._onChange();
            }
        }
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgbMaxDateValidator.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this.maxDate == null ? null : this._validator(control);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgbMaxDateValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChange = fn; };
    /**
     * @return {?}
     */
    NgbMaxDateValidator.prototype._createValidator = /**
     * @return {?}
     */
    function () { this._validator = NgbDateValidators.maxDate(this.maxDate); };
    NgbMaxDateValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'input[ngbDatepicker][maxDate][formControlName],input[ngbDatepicker][maxDate][formControl],input[ngbDatepicker][maxDate][ngModel]',
                    providers: [NGB_MAX_DATE_VALIDATOR]
                },] }
    ];
    NgbMaxDateValidator.propDecorators = {
        maxDate: [{ type: Input }]
    };
    return NgbMaxDateValidator;
}());
export { NgbMaxDateValidator };
if (false) {
    /** @type {?} */
    NgbMaxDateValidator.prototype._validator;
    /** @type {?} */
    NgbMaxDateValidator.prototype._onChange;
    /** @type {?} */
    NgbMaxDateValidator.prototype.maxDate;
}
//# sourceMappingURL=data:application/json;base64,